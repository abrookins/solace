// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['views', 'lib/backbone'], function(views, Backbone) {
    var Router;
    Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        this.history = __bind(this.history, this);

        this.search = __bind(this.search, this);

        this.index = __bind(this.index, this);
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.routes = {
        '': 'index',
        'search/:locations/:type/:query': 'search',
        'search/:locations/:type/:query/:params': 'search',
        'filter/:field/:min/:max/:locations/:type/:query': 'filter',
        'filter/:field/:min/:max/:locations/:type/:query/:params': 'filter',
        'history': 'history'
      };

      Router.prototype.initialize = function(options) {
        return this.app = new views.AppView({
          router: this,
          locations: options.locations
        });
      };

      Router.prototype.index = function() {
        return this.app.displayIndex();
      };

      Router.prototype.search = function(locationQuery, type, query, params) {
        var parsedLocations, parsedParams;
        parsedLocations = this.app.parseSearchLocations(locationQuery);
        parsedParams = this.app.parseSearchParams(params);
        return this.app.search(parsedLocations, type, query, parsedParams);
      };

      Router.prototype.filter = function(field, min, max, locations, type, query, params) {
        if (!this.app.lastSearch) {
          this.search(locations, type, query, params);
        }
        return this.app.filter({
          field: field,
          min: min,
          max: max
        });
      };

      Router.prototype.history = function() {
        return this.app.displaySavedSearches();
      };

      return Router;

    })(Backbone.Router);
    return {
      Router: Router
    };
  });

}).call(this);
